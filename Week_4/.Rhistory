```{r} echo = FALSE
```{r}
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
install.packages('janitor')
samples <-sample(1:nrow(sgemm),500)
sgemm <- read_csv("/Users/vicmon/stat765/STATS765_UOA/Week_4/sgemm_product.csv")
set.seed(123)
samples <-sample(1:nrow(sgemm),500)
sgemm <- read_csv("/Users/vicmon/stat765/STATS765_UOA/Week_4/sgemm_product.csv")
set.seed(123)
samples <-sample(1:nrow(sgemm),500)
install.packages('janitor')
install.packages("janitor")
library(tidyverse)
library(tidyverse)
library(leaps)
library(janitor)
knitr::opts_chunk$set(echo = TRUE)
sgemm <- read_csv("/Users/vicmon/stat765/STATS765_UOA/Week_4/sgemm_product.csv")
set.seed(123)
samples <-sample(1:nrow(sgemm),500)
# Task 2.1
```{r}
sgemm1 <- sgemm %>%
janitor::clean_names()%>%
mutate(logrun1 = log(run1_ms))%>%
select(-run1_ms, -run2_ms, -run3_ms, -run4_ms)
sgemm1 <- sgemm1[samples,]
segmm1
sgemm1 <- sgemm1[samples,]
segmm1
View(sgemm1)
mf <- model.frame(logrun1~.^2, data=sgemm1)
X <- model.matrix(logrun1~.^2, mf)[,-1]
y <- sgemm1$logrun1
subset1 <- regsubsets(x=X, y=y, nvmax = 20, method = 'backward')
subset1.summ <- summary(subset1)
apparentError <- subset1.summ$rss/(500-1:20)
sgemm1 <- sgemm %>%
janitor::clean_names() %>%
mutate(logrun1 = log(run1_ms)) %>%
select(-run1_ms, -run2_ms, -run3_ms, -run4_ms)
sgemm1 <- sgemm1[my_sample, ]
my_sample <- sample(1:nrow(sgemm), 500)
sgemm1 <- sgemm %>%
janitor::clean_names() %>%
mutate(logrun1 = log(run1_ms)) %>%
select(-run1_ms, -run2_ms, -run3_ms, -run4_ms)
sgemm1 <- sgemm1[my_sample, ]
segmm1
sgemm1
sgemm
```{r}
mf <- model.frame(logrun1~.^2, data=sgemm1)
X <- model.matrix(logrun1~.^2, mf)[,-1]
y <- sgemm1$logrun1
X
y
subset1 <- regsubsets(x=X, y=y, nvmax = 20, method = 'backward')
subset1.summ <- summary(subset1)
apparentError <- subset1.summ$rss/(500-1:20)
plot(1:20, apparentErrors)
plot(1:20, apparentError)
allyhat <- function(xTrain, yTrain, xTest, lambdas, nvmax = 50) {
yhat <- matrix(nrow=nrow(xTest),ncol=length(lambdas)
search <- regsubsets(xTrain,yTrain, nvmax=nvmax, method='back')
#setting lambdas vector
lambdas <- c(2,4,6,8,10,12)
allyhat<-function(xtrain, ytrain, xtest,lambdas,nvmax=50){
n<-nrow(xtrain)
yhat<-matrix(nrow=nrow(xtest),ncol=length(lambdas))
search<-regsubsets(xtrain,ytrain, nvmax=nvmax, method="back")
summ<-summary(search)
for(i in 1:length(lambdas)){
penMSE<- n*log(summ$rss)+lambdas[i]*(1:nvmax)
best<-which.min(penMSE)  #lowest AIC
betahat<-coef(search, best) #coefficients
xinmodel<-cbind(1,xtest)[,summ$which[best,]] #predictors in that model
yhat[,i]<-xinmodel%*%betahat
}
yhat
}
#setting lambdas vector
lambdas <- c(2,4,6,8,10,12)
#setting lambdas vector
lambdas <- c(2,4,6,8,10,12)
n <- nrow(x)
n <- nrow(X)
folds <- sample(rep(1:10, length.out = n))
fitted <- matrix(nrow = n, ncol - length(lambdas))
fitted <- matrix(nrow = n, ncol=length(lambdas))
#10 cv
for (i in 1:10)
{
train <- (1:n)[folds != i]
test <-(1:n)[folds != i]
fitted[test,] <- allyhat(X[train,],y[train],
X[test,],lambdas)
}
# calculate meps from cv
mspe_cv <- colMeans((y-fitted)^2)  # picking the lambda with min(mSPE)
# logrun2 from the 500 random samples
logrun2 <- log(segmm[samples,]$'Run2(ms)'
best_lambda <- 8
best_lambda <- 8
# logrun2 from the 500 random samples
logrun2 <- log(segmm[samples,]$'Run2(ms)'
best_lambda <- 8
# logrun2 from the 500 random samples
logrun2 <- log(segmm[samples,]$'Run2(ms)'
best_lambda <- 8 ## from Task 3 above
# logrun2 from the 500 random sample
logrun2 <- log(sgemm[my_sample,]$`Run2 (ms)`)
best_lambda <- 8 ## from Task 3 above
# SAME modeling strategy
search <- regsubsets(X, y, nvmax = 20, method = 'backward')
summ <- summary(search)
# penalised_rss
penalised_rss <- 500*log(summ$rss) + best_lambda*(1:20)
best_mod <- which.min(penalised_rss)
# picking the best (i.e. min penalised_rss)
beta_hat <- coef(search, best_mod)
beta_hat # coefficients
# organise X matrix for prediction
Xpred <- cbind(1, X)[, summ$which[best_mod,]]
colnames(Xpred) # varibles been picked = beta_hat names
# generate prediction, i.e. y_hat
y_hat <- Xpred %*% beta_hat # y_hat = X * beta_hat
# calculate mspe_sample
mspe_sample <- sum((logrun2 - y_hat)^2)/length(y_hat)
mspe_sample
logRunAll <- sgemm
logRunAll
logRunAll <- log(sgemm$`Run2 (ms)`)
logrun2
logRunAll
best_lambda <- 8 ## from Task 3 above
# SAME modeling strategy
search <- regsubsets(X, y, nvmax = 20, method = 'backward')
summ <- summary(search)
summ
# penalised_rss
penalised_rss <- 500*log(summ$rss) + best_lambda*(1:20)
#loading all data from sheet
l <- length(sgemm)
l
#loading all data from sheet
l <- 261,400
#loading all data from sheet
l <- 261400
# penalised_rss
penalised_rss <- l*log(summ$rss) + best_lambda*(1:20)
best_mod <- which.min(penalised_rss)
# picking the best (i.e. min penalised_rss)
beta_hat <- coef(search, best_mod)
beta_hat # coefficients
best_mod <- which.min(penalised_rss)
# picking the best (i.e. min penalised_rss)
beta_hat <- coef(search, best_mod)
beta_hat # coefficients
# organise X matrix for prediction
Xpred <- cbind(1, X)[, summ$which[best_mod,]]
colnames(Xpred) # varibles been picked = beta_hat names
# generate prediction, i.e. y_hat
y_hat <- Xpred %*% beta_hat # y_hat = X * beta_hat
# calculate mspe_sample
mspe_sample <- sum((logrun2 - y_hat)^2)/length(y_hat)
mspe_sample
install.packages('leaps')
install.packages('janitor')
install.packages("leaps")
install.packages('janitor')
library(tidyverse)
library(leaps)
library(janitor)
